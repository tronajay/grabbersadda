{"version":3,"sources":["webpack://keenthemes/../src/js/custom/documentation/general/datatables/editable.js"],"names":[],"mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD;AAChD,sCAAsC;;AAEtC;AACA,6BAA6B;;AAE7B;AACA,8CAA8C;AAC9C,oCAAoC;AACpC,wDAAwD;AACxD,mCAAmC;AACnC,aAAa;AACb,4CAA4C;AAC5C,oCAAoC;AACpC,sDAAsD;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,yCAAyC;AACzC,oCAAoC;AACpC,mDAAmD;AACnD,mCAAmC;AACnC;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC,E","file":"js/custom/documentation/general/datatables/editable.js","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTDatatablesInlineEditable = function () {\r\n    // Shared variables\r\n    var table;\r\n    var datatable;\r\n    var datepicker;\r\n    var dropdownFlag = false;\r\n    const positionOptions = ['Accountant', 'Chief Executive Officer (CEO)', 'Chief Financial Officer (CFO)', 'Chief Marketing Officer (CMO)', 'Chief Operating Officer (COO)', 'Customer Support', 'Data Coordinator', 'Developer', 'Development Lead', 'Director', 'Financial Controller', 'Integration Specialist', 'Javascript Developer', 'Junior Javascript Developer', 'Junior Technical Author', 'Marketing Designer', 'Office Manager', 'Personnel Lead', 'Pre-Sales Support', 'Post-Sales support', 'Regional Director', 'Regional Marketing', 'Sales Assistant', 'Secretary', 'Senior Javascript Developer', 'Senior Marketing Designer', 'Software Engineer', 'Support Engineer', 'Support Lead', 'System Architect', 'Systems Administrator', 'Team Leader', 'Technical Author'];\r\n\r\n    // Private functions\r\n    var example1 = function () {\r\n        // Define variables\r\n        table = document.querySelector('#kt_datatable_example_1');\r\n\r\n        // Create edit button wrapper\r\n        var editButton = document.createElement('button');\r\n        const editIconClasses = ['btn', 'btn-sm', 'btn-icon', 'btn-active-color-primary', 'h-15px', 'w-15px', 'ms-3'];\r\n        editButton.classList.add(...editIconClasses);\r\n\r\n        // Create icon element\r\n        var icon = document.createElement('i');\r\n        const iconClasses = ['bi', 'bi-pencil-fill', 'fs-5'];\r\n        icon.classList.add(...iconClasses);\r\n\r\n        // Create edit button with icon\r\n        editButton.appendChild(icon);\r\n\r\n        // Create input field\r\n        var inputField = document.createElement('input');\r\n        inputField.classList.add('form-control');\r\n        inputField.setAttribute('type', 'text');\r\n\r\n        // Create datepicker\r\n        var datepickerInput = document.createElement('input');\r\n        datepickerInput.classList.add('form-control');\r\n\r\n        // Create Select2 Dropdown\r\n        var dropdownInput = document.createElement('select');\r\n        dropdownInput.classList.add('form-select');\r\n        dropdownInput.setAttribute('data-control', 'select2');\r\n        dropdownInput.setAttribute('data-placeholder', 'Select a position');\r\n\r\n        // Add all position options\r\n        positionOptions.forEach(option => {\r\n            var positionOption = document.createElement('option');\r\n            positionOption.value = option;\r\n            positionOption.innerHTML = option;\r\n            dropdownInput.appendChild(positionOption);\r\n        });\r\n\r\n        // Get editable column state and type\r\n        const theadCols = table.querySelectorAll('thead th');\r\n        var columnData = [];\r\n        theadCols.forEach(th => {\r\n            columnData.push(\r\n                {\r\n                    edit: th.getAttribute('data-kt-col-edit') === 'false' ? false : true,\r\n                    type: th.getAttribute('data-kt-col-type') ? th.getAttribute('data-kt-col-type') : false,\r\n                });\r\n        });\r\n\r\n        // Assign active editable columns\r\n        const tbodyRows = table.querySelectorAll('tbody tr');\r\n        tbodyRows.forEach((tr, index) => {\r\n            // Select cells within row\r\n            const cells = tr.querySelectorAll('td');\r\n\r\n            // Set column name & type to each cell per row\r\n            cells.forEach((td, index) => {\r\n                td.setAttribute('data-kt-col-edit', columnData[index].edit);\r\n                if (columnData[index].type) {\r\n                    td.setAttribute('data-kt-col-type', columnData[index].type);\r\n                }\r\n            });\r\n        });\r\n\r\n        // Cells hover handler\r\n        const handleCellsHover = () => {\r\n            const allCells = table.querySelectorAll('tbody tr td');\r\n            allCells.forEach(td => {\r\n                // Only apply hander to inactive editable cells\r\n                if (td.getAttribute('data-kt-col-edit') === 'true') {\r\n                    td.addEventListener('mouseenter', e => {\r\n                        if (!td.classList.contains('editing')) {\r\n                            td.appendChild(editButton);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        // Edit button handler\r\n        editButton.addEventListener('click', e => {\r\n            // Define cell element and label\r\n            const parentCell = e.target.closest('td');\r\n            const type = parentCell.getAttribute('data-kt-col-type');\r\n            const label = parentCell.innerText;\r\n\r\n            // Toggle input field\r\n            parentCell.classList.add('editing');            // Add editing state\r\n            parentCell.innerHTML = '';                      // Remove current label\r\n\r\n            // Reset all editable forms\r\n            handleDropdown();                               // Reset dropdown\r\n\r\n            if (type === 'date') {\r\n                datepickerInput.value = label;              // Move cell label into datepicker value\r\n                editButton.remove();                        // Remove edit button\r\n                parentCell.appendChild(datepickerInput);    // Show datepicker field\r\n                handleDatapicker();                         // Init datepicker                \r\n            } else if (type === 'dropdown') {\r\n                dropdownInput.value = label;                // Move cell label into dropdown value\r\n                editButton.remove();                        // Remove edit button\r\n                parentCell.appendChild(dropdownInput);      // Show dropdown field\r\n\r\n                // Set selected dropdown value\r\n                const allOptions = parentCell.querySelectorAll('select option');\r\n                allOptions.forEach(option => {\r\n                    option.removeAttribute('selected');\r\n\r\n                    if (option.value === label) {\r\n                        option.setAttribute('selected', 'selected');\r\n                    }\r\n                });\r\n\r\n                dropdownFlag = true;\r\n\r\n                // Init select2 --- more info on Select2: https://select2.org/getting-started/basic-usage\r\n                $(dropdownInput).select2();\r\n\r\n                // Handle selected event\r\n                $(dropdownInput).on('select2:select', function (e) {\r\n                    handleDropdown();\r\n                });\r\n            } else {\r\n                inputField.value = label;                   // Move cell label into input field value\r\n                editButton.remove();                        // Remove edit button\r\n                parentCell.appendChild(inputField);         // Show input field\r\n                inputField.focus();                         // Focus input field\r\n            }\r\n        });\r\n\r\n        // Handle input blur/close event\r\n        const handleBlurEvent = (el, elLabel) => {\r\n            // Define cell element and label\r\n            const parentCell = el.closest('td');\r\n            const label = elLabel;\r\n\r\n            // Reset cell state\r\n            parentCell.innerText = label;\r\n            parentCell.classList.remove('editing');\r\n\r\n            // Update datatable cell data --- more info on cell update: https://datatables.net/reference/api/cell().data()\r\n            datatable.cell($(parentCell)).data(label).draw(false);\r\n        }\r\n\r\n        // Datepicker handler\r\n        const handleDatapicker = () => {\r\n            // Init flatpickr --- more info on flatpicker: https://flatpickr.js.org/\r\n            datepicker = flatpickr(datepickerInput, {\r\n                dateFormat: \"Y/m/d\",\r\n                clickOpens: false,\r\n                // Trigger close event -- more info on events: https://flatpickr.js.org/events/\r\n                onClose: function (selectedDates, dateStr, instance) {\r\n                    handleBlurEvent(datepickerInput, dateStr);\r\n                }\r\n            });\r\n\r\n            // Delay opening calendar to avoid conflict\r\n            setTimeout(function () {\r\n                datepicker.open();\r\n            }, 50);\r\n        }\r\n\r\n        // Input field handler\r\n        inputField.addEventListener('blur', e => {\r\n            handleBlurEvent(e.target, e.target.value);\r\n        });\r\n\r\n        // Enter/Esc button handler on input field\r\n        inputField.addEventListener('keyup', e => {\r\n            if (e.key === 'Enter' || e.key === \"Escape\") {\r\n                // Trigger input blur event\r\n                inputField.blur();\r\n            }\r\n        });\r\n\r\n        // Dropdown handler\r\n        const handleDropdown = () => {\r\n            // Return label state if dropdown already active somewhere in table\r\n            if (dropdownFlag === true) {\r\n                const label = dropdownInput.value;\r\n                const parent = dropdownInput.closest('td');\r\n                parent.innerText = label;\r\n                parent.classList.remove('editing');\r\n\r\n                // Update datatable cell data --- more info on cell update: https://datatables.net/reference/api/cell().data()\r\n                datatable.cell($(parent)).data(label).draw(false);\r\n\r\n                dropdownFlag = false;\r\n            }\r\n        }\r\n\r\n        // Handle dropdown on blur event\r\n        document.addEventListener('click', e => {\r\n            if (!e.target.closest('[data-kt-col-type=\"dropdown\"]')) {\r\n                if (dropdownFlag) {\r\n                    if (e.target !== icon) {\r\n                        handleDropdown();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\r\n        datatable = $(table).DataTable({\r\n            'columnDefs': [\r\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\r\n            ],\r\n            \"order\": [1, 'asc'],\r\n            \"drawCallback\": function (settings) {  // Call function on every datatable draw --- more info on draw callback: https://datatables.net/reference/option/drawCallback\r\n                handleCellsHover();\r\n                initToggleToolbar();\r\n                toggleToolbars();\r\n            },\r\n        });\r\n    }\r\n\r\n    // Init toggle toolbar\r\n    var initToggleToolbar = () => {\r\n        // Toggle selected action toolbar\r\n        // Select all checkboxes\r\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\r\n\r\n        // Select elements\r\n        const deleteSelected = document.querySelector('[data-kt-docs-table-select=\"delete_selected\"]');\r\n\r\n        // Toggle delete selected toolbar\r\n        checkboxes.forEach(c => {\r\n            // Checkbox on click event\r\n            c.addEventListener('click', function () {\r\n                setTimeout(function () {\r\n                    toggleToolbars();\r\n                }, 50);\r\n            });\r\n        });\r\n\r\n        // Deleted selected rows\r\n        deleteSelected.addEventListener('click', function () {\r\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n            Swal.fire({\r\n                text: \"Are you sure you want to delete selected customers?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, delete!\",\r\n                cancelButtonText: \"No, cancel\",\r\n                customClass: {\r\n                    confirmButton: \"btn fw-bold btn-danger\",\r\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    Swal.fire({\r\n                        text: \"You have deleted all selected customers!.\",\r\n                        icon: \"success\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    }).then(function () {\r\n                        // Remove all selected customers\r\n                        checkboxes.forEach(c => {\r\n                            if (c.checked) {\r\n                                datatable.row($(c.closest('tbody tr'))).remove().draw();\r\n                            }\r\n                        });\r\n\r\n                        // Remove header checked box\r\n                        const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\r\n                        headerCheckbox.checked = false;\r\n                    });\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Selected customers was not deleted.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Toggle toolbars\r\n    const toggleToolbars = () => {\r\n        // Define variables\r\n        const toolbarBase = document.querySelector('[data-kt-docs-table-toolbar=\"base\"]');\r\n        const toolbarSelected = document.querySelector('[data-kt-docs-table-toolbar=\"selected\"]');\r\n        const selectedCount = document.querySelector('[data-kt-docs-table-select=\"selected_count\"]');\r\n\r\n        // Select refreshed checkbox DOM elements \r\n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\r\n\r\n        // Detect checkboxes state & count\r\n        let checkedState = false;\r\n        let count = 0;\r\n\r\n        // Count checked boxes\r\n        allCheckboxes.forEach(c => {\r\n            if (c.checked) {\r\n                checkedState = true;\r\n                count++;\r\n            }\r\n        });\r\n\r\n        // Toggle toolbars\r\n        if (checkedState) {\r\n            selectedCount.innerHTML = count;\r\n            toolbarBase.classList.add('d-none');\r\n            toolbarSelected.classList.remove('d-none');\r\n        } else {\r\n            toolbarBase.classList.remove('d-none');\r\n            toolbarSelected.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n    var handleSearchDatatable = () => {\r\n        const filterSearch = document.querySelector('[data-kt-docs-table-filter=\"search\"]');\r\n        filterSearch.addEventListener('keyup', function (e) {\r\n            datatable.search(e.target.value).draw();\r\n        });\r\n    }\r\n\r\n\r\n    // Public methods\r\n    return {\r\n        init: function () {\r\n            example1();\r\n            handleSearchDatatable();\r\n        }\r\n    }\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTDatatablesInlineEditable.init();\r\n});"],"sourceRoot":""}